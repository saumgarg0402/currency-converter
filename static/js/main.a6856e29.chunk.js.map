{"version":3,"sources":["utils/getFormattedDate.ts","state/initialState.ts","state/reducers.ts","state/actions.ts","constants/symbolPicker.ts","utils/getValueInCurrency.ts","utils/getValueWithBaseEUR.ts","constants/apiConstants.ts","apis/getData.ts","components/CurrencyConverter.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getFormattedDayOrMonth","value","toString","getFormattedDate","date","day","getDate","month","getMonth","getFullYear","initialState","dateWiseRates","Map","sourceSymbol","sourceValue","targetSymbol","targetValue","selectedDate","Date","reducer","state","action","type","requiredDate","payload","rates","currentMap","has","delete","set","assign","updateSourceSymbol","updateTargetSymbol","updateTargetValue","symbolsList","key","text","getValueInCurrency","targetRate","getValueWithBaseEUR","sourceRate","SYMBOLS_PARAM","getData","urlParams","a","timeValue","reqURL","base","symbols","fetch","response","json","CurrencyConverter","useReducer","dispatch","convertCurrency","get","Number","loadData","then","data","addRatesForDate","onSymbolChange","event","symbol","useEffect","Stack","tokens","childrenGap","DatePicker","firstDayOfWeek","DayOfWeek","Sunday","placeholder","ariaLabel","onSelectDate","updateSelectedDate","styles","root","width","padding","horizontal","ComboBox","options","selectedKey","onChange","useComboBoxAsMenuWidth","scrollSelectedToTop","optionsContainerWrapper","height","IconButton","iconProps","iconName","onClick","temp","marginLeft","TextField","label","borderless","newValue","Text","fontWeight","fontSize","Header","backgroundColor","horizontalAlign","marginTop","color","Footer","Link","href","underline","App","initializeIcons","verticalAlign","borderRadius","border","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6856e29.chunk.js","sourcesContent":["\r\nconst getFormattedDayOrMonth = (value: number): string => {\r\n\r\n    if(value >= 10) {\r\n        return value.toString();\r\n    } \r\n\r\n    return \"0\"+value;\r\n}\r\n\r\nconst getFormattedDate = (date: Date): string => {\r\n\r\n    const day:number = date.getDate();\r\n    const month:number = date.getMonth() + 1;\r\n    const year:number = date.getFullYear();\r\n\r\n\r\n    return year + \"-\" + getFormattedDayOrMonth(month) + \"-\" + getFormattedDayOrMonth(day);\r\n}\r\n\r\nexport default getFormattedDate;","import { CurrencyConverterSchema } from './CurrencyConverterStateSchema';\r\nimport RateSchema from '../schema/RateSchema';\r\nimport getFormattedDate from '../utils/getFormattedDate';\r\n\r\n// required for caching info\r\n// cache data with base EUR only\r\nconst initialState: CurrencyConverterSchema = {\r\n    dateWiseRates: new Map<string, RateSchema>(),\r\n    sourceSymbol: 'EUR', // defaulting to EUR as that is our base\r\n    sourceValue: '',\r\n    targetSymbol: '',\r\n    targetValue: '',\r\n    selectedDate: getFormattedDate(new Date()),\r\n}\r\n\r\nexport default initialState;","import { CurrencyConverterSchema } from './CurrencyConverterStateSchema'\r\nimport initialState from './initialState';\r\nimport assign from 'lodash-es/assign';\r\nimport RateSchema from '../schema/RateSchema';\r\n\r\nconst reducer = (state: CurrencyConverterSchema, action): CurrencyConverterSchema => {\r\n    switch(action.type) {\r\n        case 'ADD_RATES_FOR_DATE': {\r\n            const requiredDate = action.payload.date;\r\n            const rates = action.payload.rates;\r\n\r\n            //create a clone\r\n            let currentMap: Map<string, RateSchema> = new Map<\r\n                string,\r\n                RateSchema\r\n            >(state.dateWiseRates);\r\n\r\n            // if key already present, delete and add again, to handle update scenarios\r\n            // as we cache only base EUR, no need to compare at base\r\n            if (currentMap.has(requiredDate)) {\r\n                currentMap.delete(requiredDate);\r\n            }\r\n\r\n            currentMap.set(requiredDate, rates);\r\n\r\n            return assign({}, state, { dateWiseRates: currentMap });\r\n        }\r\n        case 'UPDATE_SOURCE_SYMBOL':\r\n            return assign({}, state, { sourceSymbol: action.payload });\r\n        case 'UPDATE_SOURCE_VALUE':\r\n                return assign({}, state, { sourceValue: action.payload });\r\n        case 'UPDATE_TARGET_SYMBOL':\r\n            return assign({}, state, { targetSymbol: action.payload });\r\n        case 'UPDATE_TARGET_VALUE':\r\n                return assign({}, state, { targetValue: action.payload });\r\n        case 'UPDATE_SELECTED_DATE':\r\n                return assign({}, state, { selectedDate: action.payload });\r\n        case 'CLEAR_STATE':\r\n            return { ...initialState };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import RateSchema from '../schema/RateSchema';\r\n\r\nexport const addRatesForDate = (date: string, rates: RateSchema) => ({\r\n    type: \"ADD_RATES_FOR_DATE\",\r\n    payload: {\r\n        date,\r\n        rates\r\n    }\r\n});\r\n\r\nexport const updateSourceSymbol = (sourceSymbol: string) => ({\r\n    type: \"UPDATE_SOURCE_SYMBOL\",\r\n    payload: sourceSymbol\r\n});\r\n\r\nexport const updateSourceValue = (sourceValue: string) => ({\r\n    type: \"UPDATE_SOURCE_VALUE\",\r\n    payload: sourceValue\r\n});\r\n\r\nexport const updateTargetSymbol = (targetSymbol: string) => ({\r\n    type: \"UPDATE_TARGET_SYMBOL\",\r\n    payload: targetSymbol\r\n});\r\n\r\nexport const updateTargetValue = (targetValue: string) => ({\r\n    type: \"UPDATE_TARGET_VALUE\",\r\n    payload: targetValue\r\n});\r\n\r\nexport const updateSelectedDate = (date: string) => ({\r\n    type: \"UPDATE_SELECTED_DATE\",\r\n    payload: date\r\n});\r\n\r\nexport const clearState = () => ({\r\n    type: 'CLEAR_STATE',\r\n});","\r\nexport const symbolsList = [\r\n    {\r\n        key: \"EUR\",\r\n        text: \"EUR\"\r\n    },\r\n    {\r\n        key: \"GBP\",\r\n        text: \"GBP\"\r\n    },\r\n    {\r\n        key: \"HKD\",\r\n        text: \"HKD\"\r\n    },\r\n    {\r\n        key: \"IDR\",\r\n        text: \"IDR\"\r\n    },\r\n    {\r\n        key: \"ILS\",\r\n        text: \"ILS\"\r\n    },\r\n    {\r\n        key: \"DKK\",\r\n        text: \"DKK\"\r\n    },\r\n    {\r\n        key: \"INR\",\r\n        text: \"INR\"\r\n    },\r\n    {\r\n        key: \"CHF\",\r\n        text: \"CHF\"\r\n    },\r\n    {\r\n        key: \"MXN\",\r\n        text: \"MXN\"\r\n    },\r\n    {\r\n        key: \"CZK\",\r\n        text: \"CZK\"\r\n    },\r\n    {\r\n        key: \"SGD\",\r\n        text: \"SGD\"\r\n    },\r\n    {\r\n        key: \"THB\",\r\n        text: \"THB\"\r\n    },\r\n    {\r\n        key: \"HRK\",\r\n        text: \"HRK\"\r\n    },\r\n    {\r\n        key: \"MYR\",\r\n        text: \"MYR\"\r\n    },\r\n    {\r\n        key: \"NOK\",\r\n        text: \"NOK\"\r\n    },\r\n    {\r\n        key: \"CNY\",\r\n        text: \"CNY\"\r\n    },\r\n    {\r\n        key: \"BGN\",\r\n        text: \"BGN\"\r\n    },\r\n    {\r\n        key: \"PHP\",\r\n        text: \"PHP\"\r\n    },\r\n    {\r\n        key: \"PLN\",\r\n        text: \"PLN\"\r\n    },\r\n    {\r\n        key: \"ZAR\",\r\n        text: \"ZAR\"\r\n    },\r\n    {\r\n        key: \"CAD\",\r\n        text: \"CAD\"\r\n    },\r\n    {\r\n        key: \"ISK\",\r\n        text: \"ISK\"\r\n    },\r\n    {\r\n        key: \"BRL\",\r\n        text: \"BRL\"\r\n    },\r\n    {\r\n        key: \"RON\",\r\n        text: \"RON\"\r\n    },\r\n    {\r\n        key: \"NZD\",\r\n        text: \"NZD\"\r\n    },\r\n    {\r\n        key: \"TRY\",\r\n        text: \"TRY\"\r\n    },\r\n    {\r\n        key: \"JPY\",\r\n        text: \"JPY\"\r\n    },\r\n    {\r\n        key: \"RUB\",\r\n        text: \"RUB\"\r\n    },\r\n    {\r\n        key: \"KRW\",\r\n        text: \"KRW\"\r\n    },\r\n    {\r\n        key: \"USD\",\r\n        text: \"USD\"\r\n    },\r\n    {\r\n        key: \"AUD\",\r\n        text: \"AUD\"\r\n    },\r\n    {\r\n        key: \"HUF\",\r\n        text: \"HUF\"\r\n    },\r\n    {\r\n        key: \"SEK\",\r\n        text: \"SEK\"\r\n    }\r\n]","\r\n/**\r\n * \r\n * @param targetRate is the target currency rate with base as selected\r\n * @param value is the value in source currency\r\n * @returns value in target currency\r\n */\r\nconst getValueInCurrency = (targetRate: number, value: number) => {\r\n\r\n    return targetRate*value;\r\n\r\n}\r\n\r\nexport default getValueInCurrency;","\r\n/**\r\n * @param sourceRate is source currency rate with base EUR\r\n * @param targetRate is the target currency rate with base as selected\r\n * @param value is the value in source currency\r\n * @returns value in target currency\r\n */\r\n const getValueWithBaseEUR = (sourceRate: number, targetRate: number, value: number) => {\r\n\r\n    return (sourceRate/targetRate)*value;\r\n\r\n}\r\n\r\nexport default getValueWithBaseEUR;","\r\nexport const API_URL = \"https://api.ratesapi.io/api/\";\r\nexport const NOW_VALUE = \"latest\";\r\nexport const BASE_PARAM = \"base=\";\r\nexport const SYMBOLS_PARAM = \"symbols=\";\r\nexport const RESPONSE_SUCCESS = \"success\";\r\nexport const RESPONSE_ERROR = \"Error\";","import {\r\n    API_URL,\r\n    NOW_VALUE,\r\n    BASE_PARAM,\r\n    SYMBOLS_PARAM,\r\n} from '../constants/apiConstants';\r\nimport {\r\n    RESPONSE_SUCCESS\r\n} from '../constants/apiConstants';\r\n\r\nexport interface UrlParams {\r\n    date?: string;\r\n    base?: string;\r\n    symbols?: string;\r\n}\r\n\r\n/**\r\n * \r\n * @param callback what to do after request completes\r\n * @param urlParams: UrlParams\r\n * date: the date for which data is required, default is current\r\n * base: the base rate for conversion, default is EUR\r\n * symbols: the currencies for which rate is required, default is empty, all value returned\r\n * @returns the rate for symbols against base for given date\r\n */\r\nconst getData = async (urlParams: UrlParams) => {\r\n\r\n    const timeValue: string = !!urlParams?.date ? urlParams?.date : NOW_VALUE;\r\n    let reqURL: string = API_URL + timeValue;\r\n    if(!!urlParams?.base && !!urlParams?.symbols) {\r\n        reqURL += \"?\"+BASE_PARAM+urlParams?.base+\"&\"+SYMBOLS_PARAM+urlParams?.symbols;\r\n    } else if (!!urlParams?.base) {\r\n        reqURL += \"?\"+BASE_PARAM+urlParams?.base;\r\n    } else if(!!urlParams?.symbols) {\r\n        reqURL += \"?\"+SYMBOLS_PARAM+urlParams?.symbols;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(reqURL);\r\n        return response.json();\r\n    } catch {\r\n        return { base: '', rates: {}, date: ''};\r\n    }\r\n\r\n}\r\n\r\nexport default getData;","import React, { useEffect, useReducer } from 'react';\r\nimport reducer from '../state/reducers';\r\nimport initialState from '../state/initialState';\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport { DatePicker } from '@fluentui/react/lib/DatePicker';\r\nimport { DayOfWeek } from '@fluentui/date-time-utilities/lib/dateValues/dateValues';\r\nimport {\r\n    updateSelectedDate,\r\n    updateSourceSymbol,\r\n    updateTargetSymbol,\r\n    updateSourceValue,\r\n    updateTargetValue,\r\n    addRatesForDate\r\n} from '../state/actions';\r\nimport { symbolsList } from '../constants/symbolPicker';\r\nimport {\r\n    ComboBox,\r\n    IComboBox,\r\n    IComboBoxOption,\r\n} from '@fluentui/react/lib/ComboBox';\r\nimport { TextField } from '@fluentui/react/lib/TextField';\r\nimport { Text } from '@fluentui/react/lib/Text';\r\nimport RateSchema from '../schema/RateSchema';\r\nimport getValueInCurrency from '../utils/getValueInCurrency';\r\nimport getValueWithBaseEUR from '../utils/getValueWithBaseEUR';\r\nimport getData, { UrlParams } from '../apis/getData';\r\nimport getFormattedDate from '../utils/getFormattedDate';\r\nimport { IconButton } from '@fluentui/react/lib/Button';\r\n\r\nconst CurrencyConverter = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const onSelectDate = (date: Date | null | undefined) => {\r\n        if(!!date) {\r\n           dispatch(updateSelectedDate(getFormattedDate(date)));\r\n        }\r\n    }\r\n\r\n    const convertCurrency = () => {\r\n        const rates: RateSchema = state.dateWiseRates.get(state.selectedDate) || {base: '', rates: {}, date: ''};\r\n        if(rates.base === state.sourceSymbol) {\r\n            dispatch(updateTargetValue(getValueInCurrency(rates.rates[state.targetSymbol], Number(state.sourceValue)).toString()));\r\n        } else if(rates.base === state.targetSymbol) {\r\n            dispatch(updateTargetValue(getValueInCurrency((1/rates.rates[state.sourceSymbol]), Number(state.sourceValue)).toString()));\r\n        }else {\r\n            dispatch(updateTargetValue(getValueWithBaseEUR(rates.rates[state.sourceSymbol],rates.rates[state.targetSymbol], Number(state.sourceValue)).toString()));\r\n        }\r\n    }\r\n\r\n    const loadData = (date: string) => {\r\n        const urlParams: UrlParams = {\r\n            date: date,\r\n            base: 'EUR', // pull EUR only as it enriches cache, conversions are quick\r\n        };\r\n        getData(urlParams).then(data => {\r\n\r\n            //TODO: improve this check once error handling is added\r\n            // if valid value returned, add to cache\r\n            if(!!data.base){\r\n                dispatch(addRatesForDate(state.selectedDate, data));\r\n                convertCurrency();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    const switchSymbols = () => {\r\n        const temp: string = state.sourceSymbol;\r\n        dispatch(updateSourceSymbol(state.targetSymbol));\r\n        dispatch(updateTargetSymbol(temp));\r\n    }\r\n\r\n    const onSymbolChange = action => (\r\n        event?: React.FormEvent<IComboBox>,\r\n        symbol?: IComboBoxOption\r\n    ) => dispatch(action(symbol?.text || ''));\r\n\r\n    const onSourceValueChange = (\r\n        event?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n        newValue?: string\r\n    ) => dispatch(updateSourceValue(newValue || ''));\r\n\r\n    useEffect(() => { \r\n\r\n        // if any value changes, and all other values valid, re-calculate the converted value\r\n        if(!!state.sourceValue && !!state.sourceSymbol && !!state.targetSymbol) {\r\n            convertCurrency();\r\n        }\r\n    }, [state.sourceValue, state.sourceSymbol, state.targetSymbol]);\r\n\r\n    useEffect(() => {\r\n\r\n        // if data already present, use cached data for re-calculation\r\n        // else make the api call\r\n        if(state.dateWiseRates.get(state.selectedDate)) {\r\n            convertCurrency();\r\n        } else {\r\n            loadData(state.selectedDate);\r\n        }\r\n\r\n    }, [state.selectedDate]);\r\n\r\n    //load data for today on first load\r\n    useEffect(() => {\r\n\r\n        loadData(getFormattedDate(new Date()));\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Stack tokens={{ childrenGap: 25 }}>\r\n            <DatePicker \r\n                firstDayOfWeek={DayOfWeek.Sunday} \r\n                placeholder=\"Select a date...\" \r\n                ariaLabel=\"Select a date\" \r\n                onSelectDate={onSelectDate}\r\n                styles={{ root: { width: 400, padding: 10}}}\r\n                value={new Date()}\r\n            />\r\n            <Stack horizontal={true} styles={{ root: { padding: 10}}} tokens={{ childrenGap: 15 }}>\r\n                <ComboBox\r\n                    ariaLabel=\"Select source symbol\"\r\n                    options={symbolsList}\r\n                    selectedKey={state.sourceSymbol}\r\n                    placeholder=\"Select source symbol\"\r\n                    onChange={onSymbolChange(updateSourceSymbol)}\r\n                    useComboBoxAsMenuWidth={true}\r\n                    scrollSelectedToTop={true}\r\n                    styles={{ optionsContainerWrapper : { height: 400}}}\r\n                />\r\n                <IconButton\r\n                    iconProps={{ iconName: 'Switch' }}\r\n                    onClick={switchSymbols}\r\n                    ariaLabel=\"Switch source and target\"\r\n                />\r\n                <ComboBox\r\n                    ariaLabel=\"Select target symbol\"\r\n                    options={symbolsList}\r\n                    selectedKey={state.targetSymbol}\r\n                    placeholder=\"Select target symbol\"\r\n                    onChange={onSymbolChange(updateTargetSymbol)}\r\n                    useComboBoxAsMenuWidth={true}\r\n                    scrollSelectedToTop={true}\r\n                    styles={{ optionsContainerWrapper : { height: 400}}}\r\n                />\r\n            </Stack>\r\n            <Stack horizontal={true} styles={{ root: { marginLeft: 10}}} tokens={{ childrenGap: 100 }}>\r\n                <Stack>\r\n                    <TextField \r\n                        ariaLabel=\"Value to convert\"\r\n                        label=\"Value to convert\" \r\n                        borderless={true} \r\n                        placeholder=\"Enter value for conversion\" \r\n                        value={state.sourceValue}\r\n                        onChange={onSourceValueChange}\r\n                    />\r\n                </Stack>\r\n                <Stack>\r\n                    <Text styles={{ root: { fontWeight: 600}}}>{\"Converted value\"}</Text>\r\n                    <Text styles={{ root: { fontSize: 16 }}}>{state.targetValue}</Text>\r\n                </Stack>\r\n            </Stack>\r\n        </Stack>\r\n    );\r\n\r\n};\r\n\r\nexport default CurrencyConverter;","\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport React from 'react';\r\nimport { Text } from '@fluentui/react/lib/Text';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <Stack styles={{ root: { width: '100%', height: 100, backgroundColor: '#282c34'}}} horizontal={true} horizontalAlign=\"center\">\r\n            <Text styles={{ root: { marginTop: 25, fontWeight: 600, fontSize: 36, color: '#fff'}}}>Currency Converter</Text>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Header;","\r\nimport { Stack } from '@fluentui/react/lib/Stack';\r\nimport React from 'react';\r\nimport { Text } from '@fluentui/react/lib/Text';\r\nimport { Link } from '@fluentui/react/lib/Link';\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <Stack styles={{ root: { width: '100%', height: 50, backgroundColor: '#282c34'}}} horizontal={true} horizontalAlign=\"center\">\r\n            <Text styles={{ root: {fontWeight: 600, fontSize: 16, color: '#fff'}}}>Created using </Text>&nbsp;\r\n            <Link href=\"https://ratesapi.io/documentation/\" underline={true} styles={{ root: { fontWeight: 600, fontSize: 16, color: '#fff'}}}>ratesapi.io</Link>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport { initializeIcons } from '@fluentui/font-icons-mdl2';\nimport CurrencyConverter from './components/CurrencyConverter';\nimport { Stack } from '@fluentui/react/lib/Stack';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n\n  initializeIcons();\n\n  return (\n    <Stack verticalAlign=\"space-between\" styles={{ root: { height: '100%'}}}>\n      <Header/>\n      <Stack horizontal={true} horizontalAlign=\"center\">\n          <Stack styles={{ root: { width: 700, height: 600, borderRadius: 5, border: \"1px solid #c8c6c4\"}}} horizontal={true} horizontalAlign=\"center\">\n            <CurrencyConverter />\n          </Stack>\n      </Stack>\n      <Footer/>\n    </Stack>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}